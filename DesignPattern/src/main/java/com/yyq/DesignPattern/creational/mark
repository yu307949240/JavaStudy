简单工厂-适用场景
1.工厂类负责创建的对象比较少；
2.客户端（应用层）只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心。
简单工厂-优点
1.只需要传入一个正确的参数，就可以获取所需要的对象，而无需知道其创建细节。
简单工厂-缺点
1.工厂类的职责相对过重，增加新的产品，需要修改工厂类的判断逻辑，违背开闭原则。
应用到到的类：
Calendar
Logger
工厂方法-定义与类型
定义：定义一个创建对象的接口，但让实现这个接口的类来决定实力化哪个类，工厂方法让类的实例化推迟到子类中进行
类型：创建型
工厂方法-适用场景
1.创建对象需要大量重复的代码
2.客户端（应用层）不依赖于产品类实例如何被创建，实现等细节。
3.一个类通过其子类来指定创建哪个对象。
工厂方法-优点：
1.用户只需要关心所需产品的对应工厂，无需关心创建细节。
2.加入新产品符合开笔原则，提高扩展性。
工厂方法-缺点
1.类的个数容易过多，增加复杂度
2.增加类系统的抽象性和理解程度
抽象工厂-定义与类型
定义：1.抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口。
     2.无需指定他们的具体类型
类型：创建型
抽象工厂-适用场景
1.客户端（应用层）不依赖于产品类实例如何被创建，实现等细节
2.强调一系列相关产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。
3.提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现
抽象工厂-优点
1.具体产品在应用层代码隔离，无须关心创建细节
2.将一个系列的产品族统一到一起创建
抽象工厂-缺点
1.规定类所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口
2.增加了系统的抽象性和理解难度